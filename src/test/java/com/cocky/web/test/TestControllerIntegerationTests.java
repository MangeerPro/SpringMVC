package com.cocky.web.test;import com.cocky.springmvc.config.MyMvcConfig;import com.cocky.springmvc.service.DemoService;import org.junit.Before;import org.junit.Test;import org.junit.runner.RunWith;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.mock.web.MockHttpServletRequest;import org.springframework.mock.web.MockHttpSession;import org.springframework.test.context.ContextConfiguration;import org.springframework.test.context.junit4.SpringJUnit4ClassRunner;import org.springframework.test.context.web.WebAppConfiguration;import org.springframework.test.web.servlet.MockMvc;import org.springframework.test.web.servlet.setup.MockMvcBuilders;import org.springframework.web.context.WebApplicationContext;import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get;import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.*;@RunWith(SpringJUnit4ClassRunner.class)@ContextConfiguration(classes = {MyMvcConfig.class})//@WebAppConfiguration注解在类上，用来声明加载ApplicationContext是一个WebApplicationContext属性值指定的是Web资源的位置，默认为src/main/webapp，现修改为src/main/java/resources@WebAppConfiguration("src/main/java/resources")public class TestControllerIntegerationTests {    private MockMvc mockMvc; //MockMvc对象模拟MVC对象    //Spring中注入测试用例中的Bean    @Autowired    private DemoService demoService;    //注入webApplicationContext    @Autowired    WebApplicationContext webApplicationContext;    //注入模拟的HttpSession    @Autowired    MockHttpSession mockHttpSession;    //注入模拟的HttpServletRequest    @Autowired    MockHttpServletRequest mockHttpServletRequest;    //测试开始前的初始化工作    @Before    public void setup() {        //通过MockMvcBuilders.webAppContextSetup(this.webApplicationContext).build()初始化        this.mockMvc = MockMvcBuilders.webAppContextSetup(this.webApplicationContext).build();    }    @Test    public void testNormalController() throws Exception {        mockMvc.perform(get("/normal"))  //模拟向/normal进行get请求                .andExpect(status().isOk())  //预期控制返回状态为200                .andExpect(view().name("page"))  //预期view名称为page                .andExpect(forwardedUrl("WEB-INF/classes/views/page.jsp"))  //预期页面转向的真正的路径                .andExpect(model().attribute("msg", demoService.saySomething()));  //预期model里的值为demoService.saySomething()返回的hello值    }    @Test    public void testRestController() throws Exception {        mockMvc.perform(get("/testRest"))  //模拟向/testRest进行get请求                .andExpect(status().isOk())                .andExpect(content().contentType("text/plain;charset=UTF-8"))  //预期返回值类型为text/plain;charset=UTF-8                .andExpect(content().string(demoService.saySomething()));    }}